// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Verifier {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 6299446945210496847620181459578287080063562700595449300421097078892423791813;
    uint256 constant alphay  = 2162509445074872621276173652236043039170359223643744912260326719240771956662;
    uint256 constant betax1  = 11330673832928107024836921801802311083103166198193562814576260488335184130411;
    uint256 constant betax2  = 6777032664817130216325337952867218666079579563100534759425627250430194165223;
    uint256 constant betay1  = 14376739919712481039690673950976167230985451419012040090171554912843914660875;
    uint256 constant betay2  = 14476157795612409920949142936509732209891245381145785930967905796842575538025;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 10729660255457772144460647160460406272458271746168562450641790518285698703776;
    uint256 constant deltax2 = 14446567633872633823411831671793188484243459232852338930484213147845484413934;
    uint256 constant deltay1 = 21021865963554189157893200429001015915434237594753806820769503116908134975441;
    uint256 constant deltay2 = 14052920627475533952424052032316166442153913838057321494157013519894361446415;

    
    uint256 constant IC0x = 21366003944648764131512014572563615255519745686429074507405193387103105348185;
    uint256 constant IC0y = 8288751511461301693339902503505261519612951138859276260760641413957397764104;
    
    uint256 constant IC1x = 8243782608954536697617782161482634388181415518573865945830487297069573446209;
    uint256 constant IC1y = 2529261221373270827696995972824353190363264456785574391471062489272384486425;
    
    uint256 constant IC2x = 1900523515696973921421497042011098926054711854945466828421722216732032158674;
    uint256 constant IC2y = 19641390968206762693114661381532157471181342433416970495559459509259507782636;
    
    uint256 constant IC3x = 622518977207068235439168129816197053658666716019869949015543368452624803112;
    uint256 constant IC3y = 16647804803572681325974416652407354746837813680408038144337183926877579827557;
    
    uint256 constant IC4x = 11875119897750070314797072938168451256567489026201538753304217800462134244293;
    uint256 constant IC4y = 17970032278937848242542433698084723744779629228253798678575642777711854458366;
    
    uint256 constant IC5x = 7580434665649957657088033926092675293577646894093022302633379971758168424714;
    uint256 constant IC5y = 18236101749886453378444247994035737225768283662274806198605937937277471758437;
    
    uint256 constant IC6x = 1006995999945290540476107970534000638196248306580250215511771965615806277876;
    uint256 constant IC6y = 10276522259388706244200856253124151466376106584649360677936908499876642372686;
    
    uint256 constant IC7x = 1083961236681277007237666432603187252363077494905379177426398442077781453043;
    uint256 constant IC7y = 18488930935519249386652995963814839524963501683709191456101404652129541317553;
    
    uint256 constant IC8x = 5170158218212432699326267910912126955515799896509711840475119387373653527803;
    uint256 constant IC8y = 10541604459348405218857527860151818607499686826922326512928224585493140340742;
    
    uint256 constant IC9x = 15327079326167940386361053861852160914101713007309383420860011917793885972053;
    uint256 constant IC9y = 14198691405905245194142223069657249949498318883927403902005375219138061738525;
    
    uint256 constant IC10x = 2684390274589854262037685377610125576778186405898574081554356352742386688716;
    uint256 constant IC10y = 19971355689996662074616675840977245429201345977097098056687607468124612037193;
    
    uint256 constant IC11x = 1594625865763216710471967181588426901667953882065605148519752848152122012618;
    uint256 constant IC11y = 20313237868854748287893213530717344883575508790851084635868801689098854284989;
    
    uint256 constant IC12x = 20938245029619247870662527228791218152227580594693701845886405282848445247283;
    uint256 constant IC12y = 18473486151333270007257411509664707031464401230496733749831132871760098886660;
    
    uint256 constant IC13x = 13953304300211351156634634658688108480031195823840822145576994425307325760812;
    uint256 constant IC13y = 5492998449882519403712486888919154318985305937177623305095161899460855494883;
    
    uint256 constant IC14x = 7641442039955811184573266904071069328840980019397367694191250948995450822755;
    uint256 constant IC14y = 15081427305794945416329796928205996224325606636482488956911894514241294144637;
    
    uint256 constant IC15x = 9371735684669830933742008124116840272430952822271343615653252805583006458794;
    uint256 constant IC15y = 12688346251524506923022632162171979620722505490258660579660400946718831736055;
    
    uint256 constant IC16x = 12937622074827615561083042090342452933609425629165564057065262969731702897885;
    uint256 constant IC16y = 19260972322380408655740408603731707475280402387033283003907931458335443889382;
    
    uint256 constant IC17x = 21857390899516208717340475956063611809680347140483176451021167851390160495906;
    uint256 constant IC17y = 20644104173977389154474456442515142490567678827541830898640071246705857426085;
    
    uint256 constant IC18x = 18170362942608241954153940957781851053650798440074628471537935919805650093541;
    uint256 constant IC18y = 12116168079535321484392793284531945840912567615401827333564385143517906736797;
    
    uint256 constant IC19x = 19322221710859598216874525942784514253856892242919110664108102136333330088704;
    uint256 constant IC19y = 14646179833247600727283008303423597601229116523112058558551487029246238495476;
    
    uint256 constant IC20x = 21744634825606341311107011887652950097358950568468104245044387605175015037909;
    uint256 constant IC20y = 1486210968031542530350515098376949975022883359732519372157151521880324968391;
    
    uint256 constant IC21x = 20214282504291917303614198096364422859298136752144185217845432893980803975902;
    uint256 constant IC21y = 17950117579008162190613306915502364545752074415212297953499826727998663400954;
    
    uint256 constant IC22x = 16428083461333698587115394054076108119983239412993290996765247393738495827487;
    uint256 constant IC22y = 17113951351466315698526202675384368988151276017501762077988891989759177009648;
    
    uint256 constant IC23x = 17021486863887010704543576478942460010289071674376832350870509816634654082133;
    uint256 constant IC23y = 15514958417959509415569413547523347306293855760170206565507131220004561272803;
    
    uint256 constant IC24x = 3793828463769587422220214865220018291416703418244181202538812299711798979584;
    uint256 constant IC24y = 13665106852851852309844397840937181512095775988119260391379286480293034779711;
    
    uint256 constant IC25x = 7263989245409409106603030741110523223851475802897353382496600078120047458081;
    uint256 constant IC25y = 6837937619961869135442388394999760067395377676410444065016424127052207653961;
    
    uint256 constant IC26x = 3108475189094809004553327192141688231460306686250874057570907200030725628592;
    uint256 constant IC26y = 13101559460811281867899872788948459283495211959741286800504474532878311332629;
    
    uint256 constant IC27x = 13324998035214020332257277035419311059737942308287509846820624406670682971717;
    uint256 constant IC27y = 16203506992846097316750256711365572901278733214783422288228666033848581327189;
    
    uint256 constant IC28x = 16535604192621687506770832148224816543116234076673601195368495989477888066582;
    uint256 constant IC28y = 4782718211326607285338144661679678134000589353325001864443249579129258742244;
    
    uint256 constant IC29x = 1608018579806458500508185540989345301526274272891533048067249879837748434632;
    uint256 constant IC29y = 16140860567173726043436785525528603862974993744718017817925810081988965824744;
    
    uint256 constant IC30x = 4989223111463963206252829464193312291376640563406431680338913987897325964964;
    uint256 constant IC30y = 19351106051872992840060171010653998706625407322273390743353758042359201533781;
    
    uint256 constant IC31x = 7090245155397027388675271762001299423099405937810609018617325182755484308276;
    uint256 constant IC31y = 2015502983894315084995072399302401493231413954045313385864871441489627667783;
    
    uint256 constant IC32x = 13488600688125222251469177239073200736373437715150179750767830017429853866779;
    uint256 constant IC32y = 8115648727453915458320567133267683023225243044066295615461211119549700334074;
    
    uint256 constant IC33x = 2953388457368962642901575676870131290681044251750532730329066930279259327558;
    uint256 constant IC33y = 20572092775888724791575236344585212074119808382903652311800826408461902603521;
    
    uint256 constant IC34x = 3225928305705764818009151508703960956167061516635313065625551381732314678276;
    uint256 constant IC34y = 20115090678720331710580060477590264370629939994150580444085350649183795183041;
    
    uint256 constant IC35x = 15437911153954701687463409840007151947520738751862043699835170268930807935775;
    uint256 constant IC35y = 14357744913460592261785985440599662923886940642885840086895521473570065346451;
    
    uint256 constant IC36x = 5831952580218751255055463939884481226569862813399744846833644126902299054002;
    uint256 constant IC36y = 2924849930477406117567246497820128533435204927188763355543740356971776220614;
    
    uint256 constant IC37x = 11579634224957537796636751719862713926542174983539707981314224926703225566125;
    uint256 constant IC37y = 13607226030638539149014839006801787158431319448468734476768569064136464513678;
    
    uint256 constant IC38x = 3255535121100666712188052214289113728120264175363802595536258772687169765140;
    uint256 constant IC38y = 18436648521158971948302079446408860725465527530621021065471248496790451516938;
    
    uint256 constant IC39x = 3854085469038989483118334424896751677579348979408279393526736847345919302099;
    uint256 constant IC39y = 6358040733546897627223752738754912103160786582037099563694266555713574352186;
    
    uint256 constant IC40x = 19808843710179948623288506577884191144096600528827754796026582759911459323735;
    uint256 constant IC40y = 9686212599804249235300976519683713447111589653090874966810553987920506601187;
    
    uint256 constant IC41x = 20706191800711141538697013799498450221334774544597752109809615484366345842473;
    uint256 constant IC41y = 9884028425465046540056970356407541842226765949652466820055528540508419233832;
    
    uint256 constant IC42x = 2154629721955550110205445518079753806694313457013938176483652010796103185937;
    uint256 constant IC42y = 16180989866014396330209717207020847932588873584435226884903885667234968809709;
    
    uint256 constant IC43x = 6737939778168303488460937239074823071445909220504857821358028301664777752866;
    uint256 constant IC43y = 14868880678686474029490287880987624538620879763270543714889639241161081934878;
    
    uint256 constant IC44x = 9416088744640110849295166280646178586259772284949320691367996837563919076671;
    uint256 constant IC44y = 13897222100419731295303929431200322757255089154681454651881669480905400833963;
    
    uint256 constant IC45x = 807427080768000647366095149464843962464768258663664891142208781619419508734;
    uint256 constant IC45y = 16768671546887858880579344386056315228120471372569948442179627570323023507531;
    
    uint256 constant IC46x = 12057200802910244975545492352391820175967469811281637679096854856361187850823;
    uint256 constant IC46y = 19339732123912855013790539388251174875463727797707703468985844555926107448851;
    
    uint256 constant IC47x = 2503982582173603219001967402625653027270195242450261818925966932966570607716;
    uint256 constant IC47y = 6710123194474003259464626851195849460520709460840172785801034244235938541196;
    
    uint256 constant IC48x = 13762511357307075146312119893162388103417581007056614995449091962434815880802;
    uint256 constant IC48y = 2751444377669441556753189076227221915100562508681014221237291574323695695362;
    
    uint256 constant IC49x = 3570550313184747039539188357568274931566408500871653552230047303073750286612;
    uint256 constant IC49y = 12781810567276130568936878612714252771437177640631147364471835516781267759364;
    
    uint256 constant IC50x = 3108593495466351554632712238140750833448901026371283306710980450069046553693;
    uint256 constant IC50y = 21618358448743402173393449867564568920800930799175227068731215476881656790717;
    
    uint256 constant IC51x = 16836840877973998643608630386552537966549192786272297271136238444492666337478;
    uint256 constant IC51y = 19976729363731197865618728465207028169136802330463976433104017450467131849996;
    
    uint256 constant IC52x = 13176747673676628155457882783292977556557306309562292683128246696876469136475;
    uint256 constant IC52y = 6448940858884644960108356062080839497055410583058836186081153807176122434092;
    
    uint256 constant IC53x = 1948865139291188882210388709656890164084587395051701021328304209092051582569;
    uint256 constant IC53y = 19313586067956376263400318729207940712549692610886461394401402196821392810253;
    
    uint256 constant IC54x = 6977808912570874535001773059276543383478335360019001021020625788864709867758;
    uint256 constant IC54y = 17124087928351539356005169200380543508853314201674513003455545961647773056409;
    
    uint256 constant IC55x = 12137923647041214375674218857142021307051278323041488287362505140080346520142;
    uint256 constant IC55y = 20967692465292356300259154359314391964651871145062492934881895091218320064807;
    
    uint256 constant IC56x = 7197217274673128518818099151934338968870876961713629534961131280181219382700;
    uint256 constant IC56y = 9920054641884024009368767004150513233910458064324539984121966472509107409290;
    
    uint256 constant IC57x = 7309807488974173115922453530898505366452540508704314574503386070508507377732;
    uint256 constant IC57y = 8850640219313698829305975461705636722831292904209614574942744245817244324719;
    
    uint256 constant IC58x = 5923566375000013254921546914504833842976998841061666508954534931924305735534;
    uint256 constant IC58y = 17795271517895840914257645954945242557680435878597933834097691532375884519178;
    
    uint256 constant IC59x = 15722064788637603639801244428393598333769079596222657442387929670378448431898;
    uint256 constant IC59y = 7657400184456089714078871278233956025549937135338310459050689316058351430226;
    
    uint256 constant IC60x = 19461780777110130358121748772522499336079921972409895626743097673736448486870;
    uint256 constant IC60y = 6908980943486502697096244200700447411233705780549503436718931998375213963815;
    
    uint256 constant IC61x = 8192387220850096943650162351804435515259845047179635989665910940180645390515;
    uint256 constant IC61y = 17419072754436504577564647193392717504717474235119664863988597435131998329360;
    
    uint256 constant IC62x = 2323931623363987083173451597271705010976234618263729547872469641542079544603;
    uint256 constant IC62y = 20474773706354271162716970779598223188143825686086330493590152469554853869491;
    
    uint256 constant IC63x = 9420894550923918539898532765929102439833463022805234008042466097208733408851;
    uint256 constant IC63y = 17041991771053905312845433322966997638071410990013202754256468924843130312417;
    
    uint256 constant IC64x = 5027745444438895411459622655518068981763210939630683931429381929289578024464;
    uint256 constant IC64y = 4919203772690341927970195766799640200548922272331637526775866498068334231077;
    
    uint256 constant IC65x = 3215324938587462960184631431965327230715394213627842416593335732774419695942;
    uint256 constant IC65y = 3228749077621908017134166922632847180886784995592901912304210669232907630627;
    
    uint256 constant IC66x = 19319268610767704199268287413458333368287832887589205834972966632294920267159;
    uint256 constant IC66y = 2659602336909311248425806566700039436543402587693701724487777639906267688073;
    
    uint256 constant IC67x = 5437884700223265488459392586876354302771783206953689714394016894925729269161;
    uint256 constant IC67y = 13315621422294327747079769806262440242321363358281276638338435146720286635551;
    
    uint256 constant IC68x = 6778699308617604416849818754386926222655779678871973595996302649400297628896;
    uint256 constant IC68y = 4973156568206669667952764840971208825540166729130223529456548448132134651874;
    
    uint256 constant IC69x = 780349966375410054104502784584365526379232020954468511626909849638878911731;
    uint256 constant IC69y = 17630191522389815565642947529571240130201840529443742855895183506599398413678;
    
    uint256 constant IC70x = 9509476269767071515692620316084784564302530691450465532110756595504555604653;
    uint256 constant IC70y = 14308663531882511792915904997944704920643375126719499105751052917144213465185;
    
    uint256 constant IC71x = 13536151900399632266143544443242803775682863686159689540494850400392937403208;
    uint256 constant IC71y = 15010457124463445427382949512674267738019468011216212912205975028020357073625;
    
    uint256 constant IC72x = 7207098807535872225391253407325281959937614430510931534581010976119103206572;
    uint256 constant IC72y = 17656004070561985327174189554500574439140488655316939977437616928636641963588;
    
    uint256 constant IC73x = 18094794302053473638942459561424336012629149875851007629512923123076588423946;
    uint256 constant IC73y = 13775964417882670789326008476857297107764979922613924678533107724981699335161;
    
    uint256 constant IC74x = 9253354712184035182490778662521409638893611921609227827667379829774148841985;
    uint256 constant IC74y = 15298180584142035991602046517431373567034723570781997236725875446324202985428;
    
    uint256 constant IC75x = 19190456762100347237546326186011082676201026414273439211825110805380519602256;
    uint256 constant IC75y = 1790635427357904661607256867130139101086344351274415400290875376373738169410;
    
    uint256 constant IC76x = 17065812513040119869836326254007809013516865879186346169260167887228941256204;
    uint256 constant IC76y = 11460532416253140119935642284746157278911035635224102868363218390394425310736;
    
    uint256 constant IC77x = 4178599421976835616387107839095452600652415185533992104853688858205340498328;
    uint256 constant IC77y = 2227312819265883403188627525418595442824275452794670388892173229031503547587;
    
    uint256 constant IC78x = 9824115429033710768541211302569576441728424627690146867468857522832246550421;
    uint256 constant IC78y = 11725986665636987891953325131934715625489308379084953570624771027434810732625;
    
    uint256 constant IC79x = 21453051594094599070704840465649259464964114737488436378036912947432239422847;
    uint256 constant IC79y = 5557920946996511089963410339344626792063334397917184169578847070704347240960;
    
    uint256 constant IC80x = 6352028389792211994949769320817242662548226072623253072761478711603512293055;
    uint256 constant IC80y = 5522352662818065157583365736333546517654403490580113491843050592939048614974;
    
    uint256 constant IC81x = 19822646011585330044805207712066180017360916341305847252365928729044693860261;
    uint256 constant IC81y = 6999850680784954866580671370598442976114715415546630317227172349062730125113;
    
    uint256 constant IC82x = 7095308542991797210132905938201857797185049866261615219067562328293852038531;
    uint256 constant IC82y = 7990908684745505519224220876950867633453829762714120999075138872624994142544;
    
    uint256 constant IC83x = 6806424723886768679867741296853690679212634323912201531176059310209227734153;
    uint256 constant IC83y = 11302304019087519364936650013738049673434476682333977558489240800160939511241;
    
    uint256 constant IC84x = 14255073558016476386196203641694887350561536489346262893629738779066006034226;
    uint256 constant IC84y = 3075963427130762175373542066141078910747182856053882832750908017089999540048;
    
    uint256 constant IC85x = 18577435247840573618959469819376655436798401443951337142118582770457973903385;
    uint256 constant IC85y = 7884754735451810039496487152838601857456918740820503630189936652565559367234;
    
    uint256 constant IC86x = 11639459866518603403942389549889083073119234438814722730054569769078219162372;
    uint256 constant IC86y = 13357912814599902497067497146485846944846979068189996926146765058593374052245;
    
    uint256 constant IC87x = 11313364668211747394239106378482155632449825422268010928283160731722909974333;
    uint256 constant IC87y = 17085376355677473294146319034423970593881023103681661408582822909353570412873;
    
    uint256 constant IC88x = 10111156564902698833273693328899548567997432979395654986217279080367158158050;
    uint256 constant IC88y = 18646888887755926610364605251585003278890913758767209540530007307746947102732;
    
    uint256 constant IC89x = 21166724656293263342555568270489086559515622570450048693855711936459560280365;
    uint256 constant IC89y = 15089636444255047198928796626281440248225023184468952579219674503688159045135;
    
    uint256 constant IC90x = 20858028797065356215066795000590734830500866666503087806259300854802329443789;
    uint256 constant IC90y = 4333384839492714955807668067775083689110803499414159070502310020133802202024;
    
    uint256 constant IC91x = 3445362206042413905340793441595702045858440019886085501929544276930063222688;
    uint256 constant IC91y = 5066404203278259891876478862716145796912805538407350323432403936854517578097;
    
    uint256 constant IC92x = 773828607047802580975819259560106074560620339738431472041929234486172166375;
    uint256 constant IC92y = 343082124342509949998272932623733336334303202756099826685518042674739012939;
    
    uint256 constant IC93x = 14799034348507551827483096694569610792770346284937525136126329016215684081694;
    uint256 constant IC93y = 18499283034730324164285664429404996809142899028041679901419442025355004802486;
    
    uint256 constant IC94x = 20709940637931842184373421314803155482905610612146799284355020765659304072294;
    uint256 constant IC94y = 3285195819223038706569715448541092560283657498076084752046719731191419325001;
    
    uint256 constant IC95x = 3953038694880770500655057167471216996271937249797441107976826105573426284446;
    uint256 constant IC95y = 12339376493530749771140394045223608702306326256465354931416541479639886432926;
    
    uint256 constant IC96x = 8163508759462147738970759320389424691882120946983104067049600295008862928324;
    uint256 constant IC96y = 13514236269256564013055430072711793956598999399393922361401228873328132476088;
    
    uint256 constant IC97x = 18698577525592001526057605244688507446699552485695141162603045402542065616339;
    uint256 constant IC97y = 12606822687125844707526972800441081528648116044953242170090840333843006402755;
    
    uint256 constant IC98x = 19991864950361804666737919151856309660530276132309545469581325609437472501778;
    uint256 constant IC98y = 10305763957495101603351885064428258387487578465078539907506444995371156710867;
    
    uint256 constant IC99x = 20611825173705231375726629390273788416811442914248149921128836413536210309889;
    uint256 constant IC99y = 16884686984339596782129090773141815153989887656653266279812390362942655403324;
    
    uint256 constant IC100x = 20302740146676581079678720126927055274346677488127704621280143439454283821538;
    uint256 constant IC100y = 965781709095030458906710320106962331452319859515420547976531868844167023358;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[100] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
